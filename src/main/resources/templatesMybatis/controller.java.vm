package ${package.Controller};

#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RequestParam;

import javax.servlet.http.HttpServletRequest;
import ${package.Service}.${table.serviceName};
import ${package.Entity}.${entity};
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.Date;
import java.util.List;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import com.hailian.annotation.AuthPower;
import com.hailian.base.PublicResult;
import com.hailian.common.UUIDUtils;
import com.hailian.enums.PublicResultConstant;
import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.baomidou.mybatisplus.plugins.pagination.PageHelper;
import com.github.pagehelper.PageInfo;
/**
 *
 * @author ${author}
 * @date ${date}
 * @todo $!{table.comment}路由
 */
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("/api/{version}#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
@Api(value = "$!{table.comment}控制器")
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} extends BaseController{
#end
    private final Logger logger = LoggerFactory.getLogger(${table.controllerName}.class);

    @Autowired
    public ${table.serviceName} i${entity}Service;

	
	 /**
     * @date   ${date}
     * @author ${author}
     * @todo   查询单个$!{table.comment}
     */
    @ResponseBody
 	@AuthPower(avoidVersion = false, avoidPower = true, avoidSign = true, avoidLogin = true, avoidPlatform = true)
  	@ApiOperation(value = "查询单个$!{table.comment}", notes = "查询单个$!{table.comment}", httpMethod = "GET")
  	@RequestMapping(value = "/get/{id}", method = {RequestMethod.GET,RequestMethod.POST})
  	public PublicResult<${entity}> get(HttpServletRequest request,@PathVariable("id") String id) {
  		${entity} entity=null;
  		try {
  			EntityWrapper<${entity}> wrapper = new EntityWrapper<${entity}>();
  			wrapper.where("del_flag={0}", 0);
  			wrapper.eq("id", id);
  			entity=i${entity}Service.selectOne(wrapper);
  			return new PublicResult<>(PublicResultConstant.SUCCESS, entity);
		} catch (Exception e) {
			e.printStackTrace();
			logger.error(e.getMessage());
			return new PublicResult<>(PublicResultConstant.FAILED,e.getMessage(), null);
		}
  	}
    
    /**
     * @date   2018年9月25日 下午3:46:31
     * @author ${author}
     * @todo   保存或者更新$!{table.comment}
     */
    @ResponseBody
 	@AuthPower(avoidVersion = false, avoidPower = true, avoidSign = true, avoidLogin = true, avoidPlatform = true)
  	@ApiOperation(value = "保存或者更新$!{table.comment}", notes = "保存或者更新$!{table.comment}", httpMethod = "POST")
	@RequestMapping(value = "/saveOrUpdate", method = { RequestMethod.GET, RequestMethod.POST })
	public PublicResult<${entity}> add(HttpServletRequest request,${entity} entity) {
		try {
			if(entity!=null&&StringUtils.isNotBlank(entity.getId())){
				//更新
				entity.setUpdateDate(new Date());
				entity.setUpdateBy(getLoginUser(request).getId());
				i${entity}Service.updateById(entity);
			}else{
				entity.setId(UUIDUtils.getUuid());
				entity.setCreateDate(new Date());
				entity.setCreateBy(getLoginUser(request).getId());
				i${entity}Service.insert(entity);
			}
			return new PublicResult<>(PublicResultConstant.SUCCESS, entity);
		} catch (Exception e) {
			e.printStackTrace();
			logger.error(e.getMessage());
			return new PublicResult<>(PublicResultConstant.FAILED,e.getMessage(), null);
		}
	}
    
    
    
    /**
     * @date   2018年9月25日 下午3:46:31
     * @author ${author}
     * @todo   删除$!{table.comment}
     */
    @ResponseBody
 	@AuthPower(avoidVersion = false, avoidPower = true, avoidSign = true, avoidLogin = true, avoidPlatform = true)
  	@ApiOperation(value = "删除$!{table.comment}", notes = "删除$!{table.comment}", httpMethod = "POST")
    @RequestMapping(value = "/delete/{id}", method = {RequestMethod.GET,RequestMethod.POST})
	public PublicResult<${entity}> delete(HttpServletRequest request,@PathVariable("id") String id) {
		try {
			${entity} entity=new ${entity}();
			entity.setId(id);
			entity.setDelFlag("1");
			entity.setUpdateDate(new Date());
			entity.setUpdateBy(getLoginUser(request).getId());
			 if(i${entity}Service.updateById(entity)){
				 return new PublicResult<>(PublicResultConstant.SUCCESS, null);
			 }else{
				 return new PublicResult<>(PublicResultConstant.FAILED, null);
			 }
		} catch (Exception e) {
			e.printStackTrace();
			logger.error(e.getMessage());
			return new PublicResult<>(PublicResultConstant.FAILED,e.getMessage(), null);
		}
	}
    
    /**
     * @date   ${date}
     * @author ${author}
     * @todo   按照条件查询$!{table.comment}
     */
    @ResponseBody
 	@AuthPower(avoidVersion = false, avoidPower = true, avoidSign = true, avoidLogin = true, avoidPlatform = true)
  	@ApiOperation(value = "按照条件查询$!{table.comment}", notes = "按照条件查询$!{table.comment}", httpMethod = "GET")
  	@RequestMapping(value = "/list", method = {RequestMethod.GET,RequestMethod.POST})
    public PublicResult<List<${entity}>> list(HttpServletRequest request,${entity} entity){
         try {
        	 EntityWrapper<${entity}> wrapper = searchWrapper(request, entity);
        	 List<${entity}> list = i${entity}Service.selectList(wrapper);
 			return new PublicResult<>(PublicResultConstant.SUCCESS, list);
 		} catch (Exception e) {
 			e.printStackTrace();
 			logger.error(e.getMessage());
 			return new PublicResult<>(PublicResultConstant.FAILED,e.getMessage(), null);
 		}
    }
	
    /**
     * @date   ${date}
     * @author ${author}
     * @todo   分页查询$!{table.comment}
     */
    @ResponseBody
 	@AuthPower(avoidVersion = false, avoidPower = true, avoidSign = true, avoidLogin = true, avoidPlatform = true)
  	@ApiOperation(value = "分页查询$!{table.comment}", notes = "分页查询$!{table.comment}", httpMethod = "GET")
  	@RequestMapping(value = "/queryPage", method = {RequestMethod.GET,RequestMethod.POST})
    public PublicResult<PageInfo<${entity}>> queryPage(${entity} entity,@RequestParam(value="pageNum",required = false,defaultValue="1") Integer pageNum,
			@RequestParam(value="pageSize",required = false,defaultValue="10") Integer pageSize,HttpServletRequest request) {
		try {
			EntityWrapper<${entity}> wrapper = searchWrapper(request, entity);
			PageHelper.startPage(pageNum, pageSize);
			List<${entity}> list = i${entity}Service.selectList(wrapper);
			PageInfo<${entity}> page = new PageInfo<${entity}>(list);
			return new PublicResult<>(PublicResultConstant.SUCCESS, page);
		} catch (Exception e) {
			e.printStackTrace();
			logger.error(e.getMessage());
			return new PublicResult<>(PublicResultConstant.FAILED,e.getMessage(),null);
		}

	}
    /**
     * @date   2018年9月25日 下午5:36:10
     * @author ${author}
     * @todo   构建查询条件-以后扩展
     */
    private EntityWrapper<${entity}> searchWrapper(HttpServletRequest request, ${entity} entity) {
		EntityWrapper<${entity}> wrapper = new EntityWrapper<${entity}>();
		wrapper.where("del_flag={0}", 0);
		if(getLoginUser(request)!=null&&StringUtils.isNotBlank(getLoginUser(request).getId())){
			if(!isAdmin(request))
			 wrapper.and("create_by", getLoginUser(request).getId());
		}
		#foreach($field in ${table.fields})
		//根据${field.comment}模糊查询
		if(entity.${getprefix}${field.capitalName}()!=null&&StringUtils.isNotBlank(String.valueOf(entity.${getprefix}${field.capitalName}()))){
			wrapper.like("${field.name}", String.valueOf(entity.${getprefix}${field.capitalName}()));
		}
		#end
		if(StringUtils.isNoneBlank(entity.getOrderBy())){
			wrapper.orderBy(entity.getOrderBy(), entity.isAsc());
		}else{
			wrapper.orderBy("create_date", true);
		}
		if(entity.getStartDate()!=null){
			wrapper.ge("create_date", entity.getStartDate());
		}
		if(entity.getEndDate()!=null){
			wrapper.le("create_date", entity.getEndDate());
		}
		System.out.println(wrapper.originalSql());
		return wrapper;
	}
}

